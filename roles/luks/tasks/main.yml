---
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  changed_when: false

- name: Install LUKS
  ansible.builtin.apt:
    name: cryptsetup
    state: present
    install_recommends: false

- name: Create LUKS key
  ansible.builtin.shell: |
    dd if=/dev/urandom of={{ luks_volume_key }} bs=1 count=256
    chmod 0400 {{ luks_volume_key }}
  args:
    creates: "{{ luks_volume_key }}"
  register: luks_state_key

- name: Set LUKS key state
  ansible.builtin.set_fact:
    luks_state_key: "{{ luks_state_key is not changed }}"

- name: Encrypt with LUKS
  ansible.builtin.shell: |
    set -euo pipefail
    echo -n "{{ luks_volume_passphrase }}" | cryptsetup luksFormat --batch-mode --key-file {{ luks_volume_key }} {{ luks_device }}
  args:
    executable: /bin/bash
  changed_when: false
  no_log: true
  when: not luks_state_key

- name: Check LUKS volume
  ansible.builtin.stat:
    path: "/dev/mapper/{{ luks_volume_name }}"
  register: luks_state_device
  changed_when: false

- name: Set LUKS state
  ansible.builtin.set_fact:
    luks_state_device: "{{ luks_state_device.stat.exists | bool }}"

- name: Open LUKS volume
  ansible.builtin.shell: |
    set -euo pipefail
    echo -n "{{ luks_volume_passphrase }}" | cryptsetup luksOpen --key-file {{ luks_volume_key }} {{ luks_device }} {{ luks_volume_name }}
  args:
    creates: "/dev/mapper/{{ luks_volume_name }}"
    executable: /bin/bash
  no_log: true
  when: not luks_state_device

- name: Create filesystem on LUKS volume
  community.general.filesystem:
    dev: "/dev/mapper/{{ luks_volume_name }}"
    fstype: "{{ luks_filesystem }}"

- name: Check LUKS volume mountpoint
  ansible.builtin.command: mountpoint -q {{ luks_mountpoint }}
  changed_when: false
  ignore_errors: true
  register: luks_state_mountpoint

- name: Mount LUKS volume
  ansible.posix.mount:
    src: "/dev/mapper/{{ luks_volume_name }}"
    fstype: "{{ luks_filesystem }}"
    path: "{{ luks_mountpoint }}"
    state: ephemeral
  when: luks_state_mountpoint.rc != 0

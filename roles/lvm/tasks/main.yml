---
- name: Update apt cache
  ansible.builtin.apt:
    update_cache: true
  changed_when: false

- name: Install LVM
  ansible.builtin.apt:
    name: lvm2
    state: present
    install_recommends: false

- debug: var=lvm_physical_volume

- name: Create VG
  when: lvm_physical_volume != ''
  block:
    - name: Check if PV device exists
      ansible.builtin.command: lsblk {{ lvm_physical_volume }}
      register: lvm_physical_volume_device
      failed_when: false
      changed_when: false

    - name: Assert PV device exists
      ansible.builtin.assert:
        that:
          - lvm_physical_volume_device.rc == 0

    - name: Create VG
      community.general.lvg:
        vg: "{{ lvm_volume_group }}"
        pvs:
          - "{{ lvm_physical_volume }}"

- name: Set fact about the new VG
  ansible.builtin.set_fact:
    lvm_volume_group: "{{ lvm_volume_group }}"

- name: Assert LV names are unique
  ansible.builtin.assert:
    that:
      - lvm_logical_volumes | map(attribute='name') | list | unique | length == lvm_logical_volumes | length

- name: Create LV
  community.general.lvol:
    vg: "{{ lvm_volume_group }}"
    lv: "{{ item.name }}"
    size: "{{ item.size }}"
    state: present
    shrink: false
  loop: "{{ lvm_logical_volumes }}"
  loop_control:
    label: "{{ item.name }}"

- name: Print LV info
  ansible.builtin.debug:
    msg: "Logical volume: /dev/{{ lvm_volume_group }}/{{ item.name }}"
  loop: "{{ lvm_logical_volumes }}"
  loop_control:
    label: "{{ item.name }}"
